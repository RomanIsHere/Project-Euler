// The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

// Find the sum of all the primes below two million.

#include <stdio.h>
#include <math.h>
#define limit 2000000
int main() {
    long long number, sum, boundary;
    int flag;
    number = 0;
    sum = 0;
    flag = 0;

    while (number < limit) {
        flag = 0;

        if (number == 1) flag = 1;
        if (number % 2 == 0) flag = 1;
        if (number == 2 || number == 3) flag = 0;

        boundary = (int)floor(sqrt(number));

        for (int i = 3; i <= boundary; i += 2){
            if (number % i == 0) flag = 1;
        }
        if (flag == 0){
            sum += number;
        }
        number++;
    }
    printf("%lld\n", sum);
    return 0;
}

from math import ceil


def isPrime(n) : 
  
    # Corner cases 
    if (n <= 1) : 
        return False
    if (n <= 3) : 
        return True
  
    # This is checked so that we can skip  
    # middle five numbers in below loop 
    if (n % 2 == 0 or n % 3 == 0) : 
        return False
  
    i = 5
    while(i * i <= n) : 
        if (n % i == 0 or n % (i + 2) == 0) : 
            return False
        i = i + 6
  
    return True


count = 1
limit = 2000000
sumOfPrimes = 0
number = 1


while count <= limit:
  if isPrime(number) == True:
    
    sumOfPrimes += number
     
  number += 1
  count += 1
print(sumOfPrimes)  
